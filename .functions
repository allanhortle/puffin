function ip() {
    ifconfig lo0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "lo0       : " $2}'
    ifconfig en0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en0 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
    ifconfig en0 | grep 'inet6 ' | sed -e 's/ / /'| awk '{print "en0 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
    ifconfig en1 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en1 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
    ifconfig en1 | grep 'inet6 ' | sed -e 's/ / /'| awk '{print "en1 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
    dig +short myip.opendns.com @resolver1.opendns.com
}


#--------------------------------------------------------------------
# any function from http://onethingwell.org/post/14669173541/any
# search for running processes
#--------------------------------------------------------------------

function any() {
    emulate -L zsh
    unsetopt KSH_ARRAYS
    if [[ -z "$1" ]] ; then
        echo "any - grep for process(es) by keyword" >&2
        echo "Usage: any " >&2 ; return 1
    else
        ps xauwww | grep -i --color=auto "[${1[1]}]${1[2,-1]}"
    fi
}

function findByPort() {
    if [[ -z "$1" ]] ; then
        echo "findByPort - search for running processes on a port" >&2
        echo "Usage: findByPort [portNumber] " >&2 ; return 1
    else
        lsof -ti:$1 | xargs lsof -p | grep cwd
    fi
}

mkcd () {
    mkdir -p -- "$1" &&
        cd -P -- "$1"
}

#
# FZF
#

function ss() {
    tmux ls -F '#{session_name} #{?session_attached,*,}' | fzf | xargs tmux switch-client -t
}

#
# Weather
#
function weather() {
    ansiweather -a false -u metric -l ${PUFFIN_WEATHER_LOCATION:-"Melbourne, AU"}  | cut -f1 -d "-" | sed 's/^.*=> //g' | sed 's/ //' | sed 's/ . //'
}



# 
# FZF Helpers
#

fs() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
  tmux switch-client -t "$session"
}

vims() {
    local session
    session=$(ls ~/.vim/sessions | fzf --query="$1") && vim -S ~/.vim/sessions/$session
}

fco() {
  local tags branches target
  tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
    (echo "$tags"; echo "$branches") |
    fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
  git checkout $(echo "$target" | awk '{print $2}')
}
