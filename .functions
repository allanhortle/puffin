function ip() {
    ifconfig lo0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "lo0       : " $2}'
    ifconfig en0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en0 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
    ifconfig en0 | grep 'inet6 ' | sed -e 's/ / /'| awk '{print "en0 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
    ifconfig en1 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en1 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
    ifconfig en1 | grep 'inet6 ' | sed -e 's/ / /'| awk '{print "en1 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
    dig +short myip.opendns.com @resolver1.opendns.com
}


# # # Simple calculator
# # function calc() {
# # 	local result="";
# # 	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
# # 	#                       └─ default (when `--mathlib` is used) is 20
# # 	#
# # 	if [[ "$result" == *.* ]]; then
# # 		# improve the output for decimal numbers
# # 		printf "$result" |
# # 		sed -e 's/^\./0./'        `# add "0" for cases like ".5"`\
# # 		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
# # 		    -e 's/0*$//;s/\.$//';  # remove trailing zeros
# # 	else
# # 		printf "$result";
# # 	fi;
# # 	printf "\n";
# # }

# # Create a new directory and enter it
# function mkd() {
# 	mkdir -p "$@" && cd "$_";
# }

# # Change working directory to the top-most Finder window location
# function cdf() { # short for `cdfinder`
# 	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
# }


# # Determine size of a file or total size of a directory
# function fs() {
# 	if du -b /dev/null > /dev/null 2>&1; then
# 		local arg=-sbh;
# 	else
# 		local arg=-sh;
# 	fi
# 	if [[ -n "$@" ]]; then
# 		du $arg -- "$@";
# 	else
# 		du $arg .[^.]* *;
# 	fi;
# }


# # Start an HTTP server from a directory, optionally specifying the port
# function server() {
# 	local port="${1:-8000}";
# 	sleep 1 && open "http://localhost:${port}/" &
# 	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
# 	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
# 	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
# }

# # Start a PHP server from a directory, optionally specifying the port
# # (Requires PHP 5.4.0+.)
# function phpserver() {
# 	local port="${1:-4000}";
# 	local ip=$(ipconfig getifaddr en1);
# 	sleep 1 && open "http://${ip}:${port}/" &
# 	php -S "${ip}:${port}";
# }

# # Compare original and gzipped file size
# function gz() {
# 	local origsize=$(wc -c < "$1");
# 	local gzipsize=$(gzip -c "$1" | wc -c);
# 	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
# 	printf "orig: %d bytes\n" "$origsize";
# 	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
# }



# # Get a character’s Unicode code point
# function codepoint() {
# 	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
# 	# print a newline unless we’re piping the output to another program
# 	if [ -t 1 ]; then
# 		echo ""; # newline
# 	fi;
# }


# # `s` with no arguments opens the current directory in Sublime Text, otherwise
# # opens the given location
# function s() {
# 	if [ $# -eq 0 ]; then
# 		subl .;
# 	else
# 		subl "$@";
# 	fi;
# }

# # `v` with no arguments opens the current directory in Vim, otherwise opens the
# # given location
# function v() {
# 	if [ $# -eq 0 ]; then
# 		vim .;
# 	else
# 		vim "$@";
# 	fi;
# }

# # `o` with no arguments opens the current directory, otherwise opens the given
# # location
# function o() {
# 	if [ $# -eq 0 ]; then
# 		open .;
# 	else
# 		open "$@";
# 	fi;
# }

# #--------------------------------------------------------------------
# # any function from http://onethingwell.org/post/14669173541/any
# # search for running processes
# #--------------------------------------------------------------------
# function any() {
#     emulate -L zsh
#     unsetopt KSH_ARRAYS
#     if [[ -z "$1" ]] ; then
#         echo "any - grep for process(es) by keyword" >&2
#         echo "Usage: any " >&2 ; return 1
#     else
#         ps xauwww | grep -i --color=auto "[${1[1]}]${1[2,-1]}"
#     fi
# }


# #--------------------------------------------------------------------------
# # Colorize Maven Output
# #--------------------------------------------------------------------------

# # Remap the mvn shortcut
# mvn(){
#   if [ -z $PUFFIN_MAVEN_HOME ]; then
#     echo "Please set \$OTTER_MAVEN_HOME to your Maven install location"
#   else
#     color_maven $@
#   fi
# }

# # The actual coloring
# color_maven() {
#   $OTTER_MAVEN_HOME/mvn $@ | sed -e "s/Tests run: \([^,]*\), Failures: \([^,]*\), Errors: \([^,]*\), Skipped: \([^,]*\)/$fg[green]Tests run: \1$reset_color, Failures: $fg[red]\2$reset_color, Errors: $fg[yellow]\3$reset_color, Skipped: $fg[blue]\4$reset_color/g" \
#     -e "s/\(\[WARN.*\].*\)/$fg[yellow]\1$reset_color/g" \
#     -e "s/\(\[INFO\].*\)/$fg[cyan]\1$reset_color/g" \
#     -e "s/\(\[STDERR\].*\)/$fg[red]\1$reset_color/g" \
#     -e "s/\(\[ERROR\].*\)/$fg[red]\1$reset_color/g" \
#     -e "s/\(\[STDOUT\].*\)/$fg[green]\1$reset_color/g" \
# }

# #--------------------------------------------------------------------------
# # Git Prompt Functions
# #--------------------------------------------------------------------------

# # Show different symbols as appropriate for various Git repository states
# parse_git_state() {

#   # Compose this value via multiple conditional appends.
#   local GIT_STATE=""

#   local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
#   if [ "$NUM_AHEAD" -gt 0 ]; then
#     GIT_STATE=$GIT_STATE${ZSH_THEME_GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
#   fi

#   local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
#   if [ "$NUM_BEHIND" -gt 0 ]; then
#     GIT_STATE=$GIT_STATE${ZSH_THEME_GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
#   fi

#   local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
#   if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
#     GIT_STATE=$GIT_STATE$ZSH_THEME_GIT_PROMPT_MERGING
#   fi

#   if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
#     GIT_STATE=$GIT_STATE$ZSH_THEME_GIT_PROMPT_UNTRACKED
#   fi

#   if ! git diff --quiet 2> /dev/null; then
#     GIT_STATE=$GIT_STATE$ZSH_THEME_GIT_PROMPT_MODIFIED
#   fi

#   if ! git diff --cached --quiet 2> /dev/null; then
#     GIT_STATE=$GIT_STATE$ZSH_THEME_GIT_PROMPT_STAGED
#   fi

#   if [[ -n $GIT_STATE ]]; then
#     echo "$ZSH_THEME_GIT_PROMPT_PREFIX$GIT_STATE$ZSH_THEME_GIT_PROMPT_SUFFIX"
#   fi

# }

# # If inside a Git repository, print its branch and state
# git_prompt_info() {
# 	local git_where="$(parse_git_branch)"
# 	[ -n "$git_where" ] && echo "$ZSH_THEME_GIT_PROMPT_PREFIX${git_where#(refs/heads/|tags/)}$ZSH_THEME_GIT_PROMPT_SUFFIX$(parse_git_state)"
# }

# # Show Git branch/tag, or name-rev if on detached head
# parse_git_branch() {
#   (git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD) 2> /dev/null
# }

